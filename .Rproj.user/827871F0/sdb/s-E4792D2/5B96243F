{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(Hmisc)\n\n# The following two files control the current points in the graph and the random numbers.\nwrite.csv(data.frame(x = -1, y = -1), \"dta.csv\", row.names=FALSE)\nwrite.csv(data.frame(x = -1), \"nlist.csv\", row.names=FALSE)\nnew.point <- numeric(0)\n#\n\nshinyServer(function(input, output) {\n  \n  # ------------------------------------------------------------------------------------------\n  output$plot1 <- renderPlot({\n    # These two are two save current list into the files. \n    # Every time we click it rewrites.\n    data <- read.csv(\"dta.csv\", header = TRUE)  \n    #\n    \n    # We introduce the effect of clicking\n    new.point <- c(input$plot_click$x, input$plot_click$y)\n    if(length(new.point) != 0){\n      data <- rbind(data, data.frame(x = new.point[1], y = new.point[2]))\n    }\n    #\n    \n    # Write the results into files (if not, everytime we clicked it'd erase the previous point)\n    write.csv(data, \"dta.csv\", row.names = FALSE)\n    #\n    \n    # Create the plot with current data\n    plot(data, xlim=c(0,15), ylim=c(0,20), pch=16, col=\"blue\")\n    abline(h=seq(0,20,2), lty=2)\n    #\n  })\n  \n  \n  # ------------------------------------------------------------------------------------------------\n  output$table <- renderTable({\n    # Every time we click it rewrites.\n    nlist <- read.csv(\"nlist.csv\", header = TRUE)\n    #\n    \n    # We introduce the effect of clicking \n    new.point <- c(input$plot_click$x, input$plot_click$y)\n    if(length(new.point) != 0){\n      dist.to.line <- min(abs(seq(0,20,2)-new.point[2]))\n      nlist <- rbind(nlist, data.frame(x = dist.to.line))\n    }\n    #\n    \n    # Write the results into files (if not, everytime we clicked it'd erase the previous point)\n    write.csv(nlist, \"nlist.csv\", row.names = FALSE)\n    #\n    \n    #data <- dataInput()\n    # the \"if\" needs to be used for the case when we haven't cliked yet\n    if (nrow(nlist) == 1){\n      data.frame()\n    } else{\n      data.frame(Generated = nlist[-1, ])\n    }\n  }, digits = 10)\n  \n  \n  # --------------------------------------------------------------------------------------------------\n  output$table.descriptives <- renderTable({\n    # These two are two save current list into the files. \n    # Every time we click it rewrites.\n    nlist <- read.csv(\"nlist.csv\", header = TRUE)\n    #\n    \n    # We introduce the effect of clicking\n    new.point <- c(input$plot_click$x, input$plot_click$y) # we won't really use it.\n    #\n\n        # the \"if\" needs to be used for the case when we haven't cliked yet\n    if (nrow(nlist) == 1){\n      data.frame()\n    } else{\n      stats <- Hmisc::describe(nlist[-1,])$counts[-c(2,3,4)]\n      dat <- data.frame(c(stats, sd = sd(nlist[-1, ])))\n      names(dat) <- \"Some statistics\"\n      dat\n    }\n  })\n  \n\n  \n  \n  # ----------------------------------------------------------------------------\n  datasetInput <- reactive({\n    new.point <- c(input$plot_click$x, input$plot_click$y)\n    list <- read.csv(\"nlist.csv\", header = TRUE)\n    list[-1, ]\n  })\n\n  output$downloadData <- downloadHandler(\n    # This line forces to update when clicking. I am sure there are better options.\n    filename = function() {paste('data-', Sys.Date(), '.csv', sep='')},\n    content = function(file) {\n      write.csv(datasetInput(), file, row.names = FALSE)\n    }\n  ) \n  output$hist <- renderPlot({\n    if(length(as.numeric(datasetInput())) >= 2){\n      hist(datasetInput(), main = \"Histogram of generated numbers\", breaks=5)\n    }\n  })\n  \n  \n})\n",
    "created" : 1439345206187.000,
    "dirty" : false,
    "encoding" : "ISO-8859-1",
    "folds" : "",
    "hash" : "887847803",
    "id" : "5B96243F",
    "lastKnownWriteTime" : 1439354392,
    "path" : "~/Dropbox/Cursos impartidos/Estad√≠stica-Computacional/ShinyExamples/RandomPoints/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}